import { useCallback, useEffect, useState } from "react";
import PieChartDisplay from "./PieChartDisplay"
import { KPIData } from "../types/kpi";
import { User } from "../types/auth";
import { getBusinessKPI } from "../api/kpi";
import { getBusinessInsights } from "../api/business_insights";
import { InsightData } from "../types/business_insights";

const COLORS = ['#0088FE', '#00C49F', '#FFBB28', '#FF8042', '#FF6384', '#36A2EB'];

function BusinessPortal({user}: {user: User|null}) {
  const [graphData, setGraphData] = useState<KPIData|null>(null);
  const [insights, setInsights] = useState<InsightData|null>(null);
  const [apiError, setApiError] = useState('');

  const getGraphData = useCallback(async () => {
    const res = await getBusinessKPI(user?.id as number);
    const jsonRes = await res.json() as KPIData;
    setGraphData(jsonRes);
  }, [user]);

  const getInsights = useCallback(async () => {
    const res = await getBusinessInsights(user?.id as number);
    const resJson = await res.json();
    if(!res.ok) {
      setApiError((resJson as {detail: string}).detail);
    }
    else {
      setInsights(resJson);
    }
  }, [user]);

  useEffect(() => {
    if(user) {
      getGraphData();
      getInsights();
    }
  }, [user, getGraphData, getInsights]);

  const pieData1 = graphData?.products.map((product, index) => ({
    name: product.product_name,
    value: parseFloat(product.amount.toFixed(3)),
    color: COLORS[index % COLORS.length]
  }));

  const pieData2 = graphData?.payment_mode.map((mode, index) => ({
    name: mode.mode,
    value: parseFloat(mode.amount.toFixed(3)),
    color: COLORS[index % COLORS.length]
  }));

  return (
    <div className="business-portal-container">
      <div className="portal-container">
        <PieChartDisplay 
          heading="Performance Metrics" 
          description="How your business is doing recently"
          pieData1={pieData1}
          pieData2={pieData2}
        />
        <div className="portal-chat">
          {apiError && (
            <p className="api-error">Error while fetching insights: 
              <span className="api-error-text">[{apiError}]</span>
            </p>
          )}
          {insights && (
            <>
              <h2>Business Insights</h2>
              <p>Generated by AI ✨</p>
              {insights.action_items.map((item, index) => (
                <div key={index} className="insight-item">
                  ✨ {item}
                </div>
              ))}
              <h3>Some Important Questions</h3>
              <p>You should ask these questions in your next strategy meeting:</p>
              {insights.questions.map((question, index) => (
                <div key={index} className="insight-item">
                  ⁉️ {question}
                </div>
              ))}
            </>
          )}
        </div>
      </div>
    </div>
  )
}

export default BusinessPortal